{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines: AI-Powered Google Calendar Management App\n\n## Design Approach\n**Design System Approach**: Following Material Design principles for this productivity-focused application with rich data displays and complex workflows. The system emphasizes clarity, consistency, and accessibility while supporting both light and dark modes.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Light mode: 219 94% 19% (deep blue)\n- Dark mode: 219 91% 85% (light blue)\n\n**Secondary Colors:**\n- Light mode: 142 76% 36% (green for success states)\n- Dark mode: 142 69% 70% (softer green)\n\n**Background Colors:**\n- Light mode: 0 0% 98% (warm white)\n- Dark mode: 222 47% 11% (dark blue-gray)\n\n**Surface Colors:**\n- Light cards: 0 0% 100% (pure white)\n- Dark cards: 215 28% 17% (dark blue-gray)\n\n### Typography\n**Primary Font**: Inter (Google Fonts)\n- Headers: 600-700 weight\n- Body text: 400-500 weight\n- Code/data: 400 weight (mono fallback)\n\n**Font Scale:**\n- H1: text-3xl (30px)\n- H2: text-xl (20px)\n- Body: text-sm (14px)\n- Caption: text-xs (12px)\n\n### Layout System\n**Spacing Units**: Tailwind units of 2, 4, 6, and 8\n- Component padding: p-4, p-6\n- Section margins: m-4, m-8\n- Element spacing: gap-2, gap-4\n\n**Grid Structure:**\n- Three-column layout: Sidebar (320px), Main content (flex-1), Right panel (280px)\n- Mobile: Single column with collapsible sidebar\n\n## Component Library\n\n### Navigation & Layout\n- **Top Bar**: Google profile avatar, app title, dark mode toggle\n- **Calendar Sidebar**: Scrollable event list with time indicators, delete buttons\n- **Main Chat Area**: Message bubbles with timestamp, typing indicators\n\n### Interactive Elements\n- **Quick Action Buttons**: Rounded corners (rounded-lg), subtle shadows\n- **Event Cards**: Elevated appearance with hover states\n- **Task Boards**: Kanban-style columns with drag-and-drop visual feedback\n\n### Data Display\n- **Meeting Transcripts**: Code block styling with syntax highlighting\n- **Action Plans**: Structured lists with progress indicators\n- **Calendar Events**: Time-based visual hierarchy with color coding\n\n### Form Elements\n- **Input Fields**: Consistent border radius (rounded-md), focus states\n- **Buttons**: Primary (filled), Secondary (outlined), Ghost (text-only)\n- **Dropdowns**: Material Design elevation with smooth animations\n\n## Dark Mode Implementation\n- System preference detection on first visit\n- Persistent theme storage in localStorage\n- Smooth transitions between themes (transition-colors duration-200)\n- Consistent contrast ratios (4.5:1 minimum for text)\n- Form inputs maintain dark styling with proper contrast\n\n## Animations\n**Minimal and Purposeful:**\n- Theme transitions: 200ms ease\n- Hover states: 150ms ease\n- Loading states: Subtle pulse animations\n- No unnecessary scroll animations or complex transitions\n\n## Accessibility Features\n- Semantic HTML structure throughout\n- Keyboard navigation support for all interactive elements\n- Screen reader friendly labels and descriptions\n- Color-independent status indicators (icons + colors)\n- Consistent focus indicators across all themes\n\nThis design system creates a professional, productivity-focused interface that balances the complexity of calendar management with the conversational nature of AI interaction, while maintaining exceptional usability across light and dark modes.","size_bytes":3343},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport flash from \"connect-flash\";\nimport passport from \"passport\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport \"./auth\"; // Initialize passport strategies\n\n// Load environment variables\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\nif (!process.env.SESSION_SECRET) {\n  throw new Error('SESSION_SECRET environment variable is required');\n}\n\napp.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    httpOnly: true,\n    sameSite: 'lax',\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\nif (process.env.NODE_ENV === 'production') {\n  app.set('trust proxy', 1);\n}\n\n// Initialize Flash and Passport\napp.use(flash());\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, 'localhost', () => {\n    log(`serving on port ${port}`);\n  });\n})();","size_bytes":2842},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport passport from \"passport\";\nimport { storage } from \"./storage\";\nimport { fetchUpcomingEvents, deleteCalendarEvent, createCalendarEvent } from \"./googleCalendar\";\nimport { getMistralResponse, extractMeetingIntent, generateMeetingTitles, type MistralMessage } from \"./mistral\";\nimport { createEventRequestSchema } from \"../shared/schema.js\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.get('/api/auth/google', passport.authenticate('google', {\n    scope: ['profile', 'email', 'https://www.googleapis.com/auth/calendar'],\n    accessType: 'offline',\n    prompt: 'consent'\n  }));\n  \n  app.get('/api/auth/google/callback', \n    passport.authenticate('google', { \n      failureRedirect: '/',\n      failureMessage: true \n    }),\n    (req: Request, res: Response) => {\n      console.log('OAuth callback successful, user:', req.user);\n      // Successful authentication, redirect to dashboard\n      res.redirect('/');\n    }\n  );\n  \n  // Add error handling for OAuth failures\n  app.get('/api/auth/error', (req: Request, res: Response) => {\n    console.log('OAuth error:', req.flash());\n    res.status(401).json({ error: 'Authentication failed', details: req.flash() });\n  });\n  \n  app.post('/api/auth/logout', (req: Request, res: Response) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ error: 'Logout failed' });\n      }\n      res.json({ success: true });\n    });\n  });\n  \n  app.get('/api/auth/user', (req: Request, res: Response) => {\n    if (req.isAuthenticated()) {\n      res.json({ user: req.user });\n    } else {\n      res.status(401).json({ error: 'Not authenticated' });\n    }\n  });\n\n  // Calendar routes\n  app.get('/api/calendar/events', async (req: Request, res: Response) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: 'Not authenticated' });\n    }\n\n    try {\n      const user = req.user as any;\n      const events = await fetchUpcomingEvents(user);\n      res.json({ events });\n    } catch (error: any) {\n      console.error('Error fetching calendar events:', error);\n      res.status(500).json({ error: error.message || 'Failed to fetch calendar events' });\n    }\n  });\n\n  // Delete calendar event\n  app.delete('/api/calendar/events/:eventId', async (req: Request, res: Response) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: 'Not authenticated' });\n    }\n\n    try {\n      const user = req.user as any;\n      const { eventId } = req.params;\n      \n      await deleteCalendarEvent(user, eventId);\n      res.json({ success: true, message: 'Event deleted successfully' });\n    } catch (error: any) {\n      console.error('Error deleting calendar event:', error);\n      res.status(500).json({ error: error.message || 'Failed to delete calendar event' });\n    }\n  });\n\n  // Mistral AI chat endpoint\n  app.post('/api/chat', async (req: Request, res: Response) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: 'Not authenticated' });\n    }\n\n    try {\n      const { messages }: { messages: MistralMessage[] } = req.body;\n      \n      if (!messages || !Array.isArray(messages)) {\n        return res.status(400).json({ error: 'Invalid messages format' });\n      }\n\n      const response = await getMistralResponse(messages);\n      res.json({ response });\n    } catch (error: any) {\n      console.error('Error getting AI response:', error);\n      res.status(500).json({ error: error.message || 'Failed to get AI response' });\n    }\n  });\n\n  // AI meeting extraction endpoint\n  app.post('/api/ai/extract-meeting', async (req: Request, res: Response) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: 'Not authenticated' });\n    }\n\n    try {\n      const { message, context } = req.body;\n      \n      if (!message || typeof message !== 'string') {\n        return res.status(400).json({ error: 'Message is required' });\n      }\n\n      const extraction = await extractMeetingIntent(message, context || '');\n      res.json({ extraction });\n    } catch (error: any) {\n      console.error('Error extracting meeting intent:', error);\n      res.status(500).json({ error: error.message || 'Failed to extract meeting intent' });\n    }\n  });\n\n  // AI title generation endpoint\n  app.post('/api/ai/generate-titles', async (req: Request, res: Response) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: 'Not authenticated' });\n    }\n\n    try {\n      const { purpose, participants, context } = req.body;\n      \n      if (!purpose || typeof purpose !== 'string') {\n        return res.status(400).json({ error: 'Purpose is required' });\n      }\n\n      const titleSuggestion = await generateMeetingTitles(\n        purpose, \n        participants || [], \n        context || ''\n      );\n      res.json({ titleSuggestion });\n    } catch (error: any) {\n      console.error('Error generating meeting titles:', error);\n      res.status(500).json({ error: error.message || 'Failed to generate meeting titles' });\n    }\n  });\n\n  // Create calendar event with enhanced features\n  app.post('/api/calendar/events', async (req: Request, res: Response) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: 'Not authenticated' });\n    }\n\n    try {\n      const user = req.user as any;\n      \n      // Validate request body using Zod schema\n      const validationResult = createEventRequestSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: 'Invalid request data', \n          details: validationResult.error.errors \n        });\n      }\n\n      const eventData = validationResult.data;\n      \n      // Create the calendar event with optional Meet link\n      const createdEvent = await createCalendarEvent(\n        user, \n        eventData, \n        eventData.createMeetLink\n      );\n\n      // Store event in our database if needed\n      try {\n        await storage.createEvent({\n          googleEventId: createdEvent.googleEventId!,\n          userId: user.id,\n          title: eventData.title,\n          description: eventData.description || '',\n          startTime: new Date(eventData.startTime),\n          endTime: new Date(eventData.endTime),\n          meetingLink: createdEvent.meetingLink || '',\n          attendees: eventData.attendees.map(a => a.email),\n        });\n      } catch (dbError) {\n        // Log database error but don't fail the request\n        console.error('Error storing event in database:', dbError);\n      }\n\n      res.json({ \n        success: true, \n        event: createdEvent,\n        message: 'Meeting created successfully!' \n      });\n    } catch (error: any) {\n      console.error('Error creating calendar event:', error);\n      res.status(500).json({ error: error.message || 'Failed to create calendar event' });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}","size_bytes":7053},"server/storage.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { users, type User, type InsertUser } from \"../shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\n// Ensure environment variables are loaded\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nconst db = drizzle(sql);\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByGoogleId(googleId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserTokens(googleId: string, accessToken: string, refreshToken?: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByGoogleId(googleId: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.googleId, googleId)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values({\n      ...insertUser,\n      picture: insertUser.picture || null,\n      accessToken: insertUser.accessToken || null,\n      refreshToken: insertUser.refreshToken || null\n    }).returning();\n    return result[0];\n  }\n\n  async updateUserTokens(googleId: string, accessToken: string, refreshToken?: string): Promise<void> {\n    await db.update(users)\n      .set({ \n        accessToken, \n        refreshToken: refreshToken || null \n      })\n      .where(eq(users.googleId, googleId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":1831},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, json, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  googleId: text(\"google_id\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  picture: text(\"picture\"),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n});\n\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  googleEventId: text(\"google_event_id\").unique(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  startTime: timestamp(\"start_time\").notNull(),\n  endTime: timestamp(\"end_time\").notNull(),\n  meetingLink: text(\"meeting_link\"),\n  attendees: json(\"attendees\").$type<string[]>().default([]),\n  agenda: text(\"agenda\"),\n  transcriptGenerated: boolean(\"transcript_generated\").default(false),\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").references(() => events.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  assignee: text(\"assignee\").notNull(),\n  deadline: timestamp(\"deadline\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_progress, completed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  role: text(\"role\").notNull(), // user, assistant\n  content: text(\"content\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true });\nexport const insertEventSchema = createInsertSchema(events).omit({ id: true });\nexport const insertTaskSchema = createInsertSchema(tasks).omit({ id: true, createdAt: true });\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({ id: true, timestamp: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Event = typeof events.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\n// Enhanced chat message types for UI blocks\nexport const attendeeSchema = z.object({\n  email: z.string().email(),\n  name: z.string().optional(),\n  verified: z.boolean().default(false),\n});\n\nexport const meetingExtractionSchema = z.object({\n  intent: z.enum(['create_meeting', 'schedule_meeting', 'other']),\n  confidence: z.number().min(0).max(1),\n  fields: z.object({\n    startTime: z.string().optional(), // ISO 8601 string\n    endTime: z.string().optional(),\n    duration: z.number().optional(), // minutes\n    purpose: z.string().optional(),\n    participants: z.array(z.string()).default([]),\n    suggestedTitle: z.string().optional(),\n  }),\n  missing: z.array(z.enum(['startTime', 'endTime', 'duration', 'participants'])).default([]),\n});\n\nexport const titleSuggestionSchema = z.object({\n  suggestions: z.array(z.string()).length(3),\n  context: z.string(),\n});\n\nexport const uiBlockSchema = z.discriminatedUnion('type', [\n  z.object({\n    type: z.literal('meeting_link_choice'),\n    data: z.object({\n      question: z.string(),\n      meetingId: z.string(),\n    }),\n  }),\n  z.object({\n    type: z.literal('attendee_editor'),\n    data: z.object({\n      attendees: z.array(attendeeSchema),\n      meetingId: z.string(),\n    }),\n  }),\n  z.object({\n    type: z.literal('title_suggestions'),\n    data: z.object({\n      suggestions: z.array(z.string()),\n      currentTitle: z.string().optional(),\n      meetingId: z.string(),\n    }),\n  }),\n  z.object({\n    type: z.literal('event_review'),\n    data: z.object({\n      title: z.string(),\n      startTime: z.string(),\n      endTime: z.string(),\n      attendees: z.array(attendeeSchema),\n      includeMeetLink: z.boolean(),\n      meetingId: z.string(),\n    }),\n  }),\n]);\n\nexport const enhancedChatMessageSchema = z.object({\n  id: z.string(),\n  role: z.enum(['user', 'assistant']),\n  content: z.string(),\n  timestamp: z.date(),\n  uiBlock: uiBlockSchema.optional(),\n  metadata: z.object({\n    extraction: meetingExtractionSchema.optional(),\n    meetingId: z.string().optional(),\n  }).optional(),\n});\n\n// Types for enhanced features\nexport type Attendee = z.infer<typeof attendeeSchema>;\nexport type MeetingExtraction = z.infer<typeof meetingExtractionSchema>;\nexport type TitleSuggestion = z.infer<typeof titleSuggestionSchema>;\nexport type UIBlock = z.infer<typeof uiBlockSchema>;\nexport type EnhancedChatMessage = z.infer<typeof enhancedChatMessageSchema>;\n\n// Event creation request schema\nexport const createEventRequestSchema = z.object({\n  title: z.string(),\n  startTime: z.string(), // ISO 8601\n  endTime: z.string(), // ISO 8601\n  description: z.string().optional(),\n  attendees: z.array(attendeeSchema),\n  createMeetLink: z.boolean().default(false),\n});\n\nexport type CreateEventRequest = z.infer<typeof createEventRequestSchema>;\n","size_bytes":5540},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { GoogleAuthButton } from \"@/components/GoogleAuthButton\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport NotFound from \"@/pages/not-found\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nfunction Router() {\n  const { isAuthenticated, isChecking, signInWithGoogle } = useAuth();\n\n  if (isChecking) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <GoogleAuthButton \n        onSignIn={signInWithGoogle} \n        isLoading={false}\n      />\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <ThemeProvider defaultTheme=\"system\">\n          <Toaster />\n          <Router />\n        </ThemeProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1408},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 222 84% 4.9%;\n\n  --border: 220 13% 91%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 222 84% 4.9%;\n\n  --card-border: 220 13% 91%;\n\n  --sidebar: 220 14% 95%;\n\n  --sidebar-foreground: 222 84% 4.9%;\n\n  --sidebar-border: 220 13% 91%;\n\n  --sidebar-primary: 219 94% 19%;\n\n  --sidebar-primary-foreground: 210 40% 98%;\n\n  --sidebar-accent: 142 76% 36%;\n\n  --sidebar-accent-foreground: 355 100% 97%;\n\n  --sidebar-ring: 219 94% 19%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 222 84% 4.9%;\n\n  --popover-border: 220 13% 91%;\n\n  --primary: 219 94% 19%;\n\n  --primary-foreground: 210 40% 98%;\n\n  --secondary: 210 40% 96%;\n\n  --secondary-foreground: 222 84% 4.9%;\n\n  --muted: 210 40% 96%;\n\n  --muted-foreground: 215 16% 47%;\n\n  --accent: 210 40% 93%;\n\n  --accent-foreground: 222 84% 4.9%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 210 40% 98%;\n\n  --input: 220 13% 91%;\n  --ring: 219 94% 19%;\n  --chart-1: 219 94% 19%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 287 94% 53%;\n  --chart-4: 24 94% 53%;\n  --chart-5: 197 94% 53%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 13% 91% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 13% 91% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 1px 2px -1px hsl(220 13% 91% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 1px 2px -1px hsl(220 13% 91% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 2px 4px -1px hsl(220 13% 91% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 4px 6px -1px hsl(220 13% 91% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 8px 10px -1px hsl(220 13% 91% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 13% 91% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 210 40% 98%;\n\n  --border: 217 32% 17%;\n\n  --card: 215 28% 17%;\n\n  --card-foreground: 210 40% 98%;\n\n  --card-border: 217 32% 17%;\n\n  --sidebar: 220 35% 14%;\n\n  --sidebar-foreground: 210 40% 98%;\n\n  --sidebar-border: 217 32% 17%;\n\n  --sidebar-primary: 219 91% 85%;\n\n  --sidebar-primary-foreground: 222 84% 4.9%;\n\n  --sidebar-accent: 142 69% 70%;\n\n  --sidebar-accent-foreground: 220 35% 14%;\n\n  --sidebar-ring: 219 91% 85%;\n\n  --popover: 215 28% 17%;\n\n  --popover-foreground: 210 40% 98%;\n\n  --popover-border: 217 32% 17%;\n\n  --primary: 219 94% 19%;\n\n  --primary-foreground: 210 40% 98%;\n\n  --secondary: 217 32% 17%;\n\n  --secondary-foreground: 210 40% 98%;\n\n  --muted: 217 32% 17%;\n\n  --muted-foreground: 215 20% 65%;\n\n  --accent: 217 32% 17%;\n\n  --accent-foreground: 210 40% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 210 40% 98%;\n\n  --input: 217 32% 17%;\n  --ring: 219 91% 85%;\n  --chart-1: 219 91% 85%;\n  --chart-2: 142 69% 70%;\n  --chart-3: 287 85% 75%;\n  --chart-4: 24 85% 75%;\n  --chart-5: 197 85% 75%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(217 32% 17% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217 32% 17% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217 32% 17% / 0.00), 0px 1px 2px -1px hsl(217 32% 17% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217 32% 17% / 0.00), 0px 1px 2px -1px hsl(217 32% 17% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217 32% 17% / 0.00), 0px 2px 4px -1px hsl(217 32% 17% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217 32% 17% / 0.00), 0px 4px 6px -1px hsl(217 32% 17% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217 32% 17% / 0.00), 0px 8px 10px -1px hsl(217 32% 17% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217 32% 17% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9874},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CalendarSidebar.tsx":{"content":"import { Calendar, Clock, ExternalLink, Trash2, ChevronDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { format, isToday, isTomorrow } from \"date-fns\";\nimport { useState, useEffect } from \"react\";\n\ninterface CalendarEvent {\n  id: string;\n  googleEventId?: string;\n  title: string;\n  startTime: Date;\n  endTime: Date;\n  meetingLink?: string;\n  attendees: string[];\n  description?: string;\n}\n\ninterface CalendarSidebarProps {\n  events: CalendarEvent[];\n  onDeleteEvent: (eventId: string) => void;\n  onEventClick: (event: CalendarEvent) => void;\n}\n\nexport function CalendarSidebar({ events, onDeleteEvent, onEventClick }: CalendarSidebarProps) {\n  const [openEvent, setOpenEvent] = useState<string | null>(null);\n  const [deleteEventId, setDeleteEventId] = useState<string | null>(null);\n\n  // Allow only one event to be expanded at a time\n  const toggleEvent = (eventId: string) => {\n    setOpenEvent(prev => prev === eventId ? null : eventId);\n  };\n\n  const getEventDateLabel = (date: Date) => {\n    if (isToday(date)) return \"Today\";\n    if (isTomorrow(date)) return \"Tomorrow\";\n    return format(date, \"EEE, MMM d\");\n  };\n\n  // Group events by date\n  const groupedEvents = events.reduce((groups, event) => {\n    const dateKey = format(new Date(event.startTime), \"yyyy-MM-dd\");\n    if (!groups[dateKey]) {\n      groups[dateKey] = [];\n    }\n    groups[dateKey].push(event);\n    return groups;\n  }, {} as Record<string, CalendarEvent[]>);\n\n  const handleDeleteClick = (eventId: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    setDeleteEventId(eventId);\n  };\n\n  const confirmDelete = () => {\n    if (deleteEventId) {\n      onDeleteEvent(deleteEventId);\n      setDeleteEventId(null);\n    }\n  };\n\n  const cancelDelete = () => {\n    setDeleteEventId(null);\n  };\n\n  return (\n    <>\n      <div className=\"space-y-4\">\n        {/* Fixed header */}\n        <div className=\"sticky top-0 bg-card z-10 pb-2 border-b\">\n          <h2 className=\"text-lg font-semibold flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Upcoming Events\n          </h2>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {Object.entries(groupedEvents).length > 0 ? (\n            Object.entries(groupedEvents).map(([dateKey, dayEvents]) => (\n              <div key={dateKey} className=\"space-y-2\">\n                <h3 className=\"text-sm font-medium text-muted-foreground px-2\">\n                  {getEventDateLabel(new Date(dayEvents[0].startTime))}\n                </h3>\n                {dayEvents.map((event) => (\n                  <Collapsible\n                    key={event.id}\n                    open={openEvent === event.id}\n                    onOpenChange={() => toggleEvent(event.id)}\n                  >\n                    <div \n                      className=\"border rounded-lg hover-elevate cursor-pointer\"\n                      data-testid={`event-card-${event.id}`}\n                    >\n                      <div className=\"p-3\">\n                        <div className=\"flex items-start justify-between gap-2\">\n                          <div className=\"flex-1 min-w-0\">\n                            <h4 \n                              className=\"font-medium truncate cursor-pointer\"\n                              onClick={() => onEventClick(event)}\n                              data-testid={`event-title-${event.id}`}\n                            >\n                              {event.title}\n                            </h4>\n                            <div className=\"flex items-center gap-2 mt-1\">\n                              <Clock className=\"h-3 w-3 text-muted-foreground\" />\n                              <span className=\"text-xs text-muted-foreground\">\n                                {format(new Date(event.startTime), \"h:mm a\")} - {format(new Date(event.endTime), \"h:mm a\")}\n                              </span>\n                            </div>\n                            {event.attendees.length > 0 && (\n                              <Badge variant=\"secondary\" className=\"mt-2 text-xs\">\n                                {event.attendees.length} attendee{event.attendees.length > 1 ? 's' : ''}\n                              </Badge>\n                            )}\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            {event.meetingLink && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-6 w-6\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  window.open(event.meetingLink, '_blank');\n                                }}\n                                data-testid={`button-meeting-link-${event.id}`}\n                              >\n                                <ExternalLink className=\"h-3 w-3\" />\n                              </Button>\n                            )}\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"h-6 w-6 text-destructive hover:text-destructive\"\n                              onClick={(e) => handleDeleteClick(event.id, e)}\n                              data-testid={`button-delete-event-${event.id}`}\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </Button>\n                            <CollapsibleTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-6 w-6\"\n                                data-testid={`button-expand-event-${event.id}`}\n                              >\n                                <ChevronDown className={`h-3 w-3 transition-transform ${openEvent === event.id ? 'rotate-180' : ''}`} />\n                              </Button>\n                            </CollapsibleTrigger>\n                          </div>\n                        </div>\n                      </div>\n                      <CollapsibleContent>\n                        <div className=\"px-3 pb-3 pt-0 border-t bg-muted/30\">\n                          {event.description && (\n                            <div className=\"mt-2\">\n                              <p className=\"text-xs text-muted-foreground mb-1\">Description:</p>\n                              <p className=\"text-sm\">{event.description}</p>\n                            </div>\n                          )}\n                          {event.attendees.length > 0 && (\n                            <div className=\"mt-2\">\n                              <p className=\"text-xs text-muted-foreground mb-1\">Attendees:</p>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {event.attendees.map((attendee, index) => (\n                                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                    {attendee}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          <div className=\"mt-3 space-y-1\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"w-full text-xs\"\n                              onClick={() => {\n                                console.log('Ask AI about event:', event.id);\n                              }}\n                              data-testid={`button-ask-ai-${event.id}`}\n                            >\n                              Ask AI about this event\n                            </Button>\n                          </div>\n                        </div>\n                      </CollapsibleContent>\n                    </div>\n                  </Collapsible>\n                ))}\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Calendar className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n              <p className=\"text-sm\">No upcoming events</p>\n              <p className=\"text-xs mt-1\">Your calendar events will appear here once you add them</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <AlertDialog open={!!deleteEventId} onOpenChange={(open) => !open && cancelDelete()}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will permanently delete this event from your Google Calendar. This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={cancelDelete}>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={confirmDelete} className=\"bg-destructive hover:bg-destructive/90\">\n              Delete Event\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}","size_bytes":9813},"client/src/components/ChatInterface.tsx":{"content":"import { Bot, Send, User, Loader2, Sparkles } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { format } from \"date-fns\";\nimport { MeetingUIBlock } from \"./MeetingUIBlocks\";\nimport { EnhancedChatMessage, Attendee, UIBlock, MeetingExtraction } from \"../../../shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n  uiBlock?: UIBlock;\n  metadata?: {\n    extraction?: MeetingExtraction;\n    meetingId?: string;\n  };\n}\n\ninterface MeetingData {\n  id: string;\n  title?: string;\n  startTime?: string;\n  endTime?: string;\n  attendees: Attendee[];\n  includeMeetLink: boolean;\n  purpose?: string;\n  aiSuggestions?: string[];\n}\n\ninterface ChatInterfaceProps {\n  messages: ChatMessage[];\n  onSendMessage: (message: string) => void;\n  onAddAssistantMessage?: (message: ChatMessage) => void;\n  isLoading?: boolean;\n  userName?: string;\n  userAvatar?: string;\n}\n\nconst quickActions = [\n  \"Schedule a meeting with the team\",\n  \"What's my next meeting about?\",\n  \"Generate an agenda for tomorrow's standup\", \n  \"Summarize today's meetings\",\n  \"Find a good time for a 1-on-1\",\n  \"Check for scheduling conflicts\"\n];\n\nconst surprisePrompts = [\n  \"What would be the most productive meeting schedule for this week?\",\n  \"Help me prepare talking points for my upcoming client call\",\n  \"Suggest ways to reduce meeting fatigue in my calendar\",\n  \"What patterns do you notice in my meeting schedule?\",\n  \"Help me block time for focused work between meetings\"\n];\n\nexport function ChatInterface({ \n  messages, \n  onSendMessage, \n  onAddAssistantMessage,\n  isLoading = false,\n  userName = \"User\",\n  userAvatar\n}: ChatInterfaceProps) {\n  const [input, setInput] = useState('');\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const [meetingData, setMeetingData] = useState<Record<string, MeetingData>>({});\n  const [processingMeeting, setProcessingMeeting] = useState(false);\n  \n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');\n      if (scrollContainer) {\n        scrollContainer.scrollTop = scrollContainer.scrollHeight;\n      }\n    }\n  }, [messages]);\n\n  const handleSendMessage = async () => {\n    if (input.trim() && !isLoading) {\n      const userMessage = input.trim();\n      setInput('');\n      \n      // Send the regular message first\n      onSendMessage(userMessage);\n      \n      // Check if this message indicates meeting creation intent\n      try {\n        setProcessingMeeting(true);\n        const response = await apiRequest('/api/ai/extract-meeting', {\n          method: 'POST',\n          body: JSON.stringify({\n            message: userMessage,\n            context: messages.slice(-3).map(m => `${m.role}: ${m.content}`).join('\\n')\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        const { extraction } = response;\n        \n        if (extraction.intent !== 'other' && extraction.confidence > 0.6) {\n          // Start the meeting creation flow\n          await startMeetingCreationFlow(extraction, userMessage);\n        }\n      } catch (error) {\n        console.error('Error extracting meeting intent:', error);\n      } finally {\n        setProcessingMeeting(false);\n      }\n    }\n  };\n\n  const startMeetingCreationFlow = async (extraction: MeetingExtraction, originalMessage: string) => {\n    const meetingId = `meeting-${Date.now()}`;\n    \n    // Initialize meeting data\n    const newMeetingData: MeetingData = {\n      id: meetingId,\n      title: extraction.fields.suggestedTitle,\n      startTime: extraction.fields.startTime,\n      endTime: extraction.fields.endTime,\n      attendees: extraction.fields.participants.map(email => ({\n        email: email.toLowerCase(),\n        verified: email.toLowerCase().includes('@gmail.com')\n      })),\n      includeMeetLink: false,\n      purpose: extraction.fields.purpose\n    };\n\n    setMeetingData(prev => ({ ...prev, [meetingId]: newMeetingData }));\n\n    // Add AI response with meeting link choice\n    const assistantMessage: ChatMessage = {\n      id: `msg-${Date.now()}`,\n      role: 'assistant',\n      content: \"I'd be happy to help you create this meeting! Let me guide you through the process.\",\n      timestamp: new Date(),\n      uiBlock: {\n        type: 'meeting_link_choice',\n        data: {\n          question: \"Would you like to include a Google Meet link for this meeting?\",\n          meetingId\n        }\n      },\n      metadata: {\n        extraction,\n        meetingId\n      }\n    };\n\n    // Add the assistant message with UI block to the message list\n    if (onAddAssistantMessage) {\n      onAddAssistantMessage(assistantMessage);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const getTimeBasedGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return \"Good morning\";\n    if (hour < 17) return \"Good afternoon\"; \n    return \"Good evening\";\n  };\n\n  const handleQuickAction = (action: string) => {\n    onSendMessage(action);\n  };\n\n  const handleSurpriseMe = () => {\n    const randomPrompt = surprisePrompts[Math.floor(Math.random() * surprisePrompts.length)];\n    onSendMessage(randomPrompt);\n  };\n\n  // Meeting creation event handlers\n  const handleMeetingLinkChoice = (includeLink: boolean, meetingId: string) => {\n    setMeetingData(prev => ({\n      ...prev,\n      [meetingId]: { ...prev[meetingId], includeMeetLink: includeLink }\n    }));\n    \n    // Move to attendee editor step\n    const message: ChatMessage = {\n      id: `msg-${Date.now()}`,\n      role: 'assistant',\n      content: `${includeLink ? 'Great! I\\'ll include a Google Meet link.' : 'Got it, no meeting link needed.'} Now let's add the attendees for this meeting.`,\n      timestamp: new Date(),\n      uiBlock: {\n        type: 'attendee_editor',\n        data: {\n          attendees: meetingData[meetingId]?.attendees || [],\n          meetingId\n        }\n      }\n    };\n    \n    if (onAddAssistantMessage) {\n      onAddAssistantMessage(message);\n    }\n  };\n\n  const handleAttendeesUpdate = async (attendees: Attendee[], meetingId: string) => {\n    setMeetingData(prev => ({\n      ...prev,\n      [meetingId]: { ...prev[meetingId], attendees }\n    }));\n\n    // Generate AI title suggestions if we have enough context\n    const currentMeeting = meetingData[meetingId];\n    if (currentMeeting?.purpose && attendees.length > 0) {\n      try {\n        const response = await apiRequest('/api/ai/generate-titles', {\n          method: 'POST',\n          body: JSON.stringify({\n            purpose: currentMeeting.purpose,\n            participants: attendees.map(a => a.email),\n            context: `Meeting with ${attendees.length} attendees about ${currentMeeting.purpose}`\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        const { titleSuggestion } = response;\n        \n        const message: ChatMessage = {\n          id: `msg-${Date.now()}`,\n          role: 'assistant',\n          content: 'Perfect! Now let\\'s choose a title for your meeting. I\\'ve generated some suggestions based on the context.',\n          timestamp: new Date(),\n          uiBlock: {\n            type: 'title_suggestions',\n            data: {\n              suggestions: titleSuggestion.suggestions,\n              currentTitle: currentMeeting.title,\n              meetingId\n            }\n          }\n        };\n        \n        if (onAddAssistantMessage) {\n          onAddAssistantMessage(message);\n        }\n      } catch (error) {\n        console.error('Error generating titles:', error);\n      }\n    }\n  };\n\n  const handleTitleSelect = (title: string, meetingId: string) => {\n    setMeetingData(prev => ({\n      ...prev,\n      [meetingId]: { ...prev[meetingId], title }\n    }));\n    \n    // Move to final review step\n    const currentMeeting = meetingData[meetingId];\n    if (currentMeeting && currentMeeting.startTime && currentMeeting.endTime) {\n      const message: ChatMessage = {\n        id: `msg-${Date.now()}`,\n        role: 'assistant',\n        content: 'Excellent! Here\\'s a summary of your meeting. Please review the details and create the event when you\\'re ready.',\n        timestamp: new Date(),\n        uiBlock: {\n          type: 'event_review',\n          data: {\n            title,\n            startTime: currentMeeting.startTime,\n            endTime: currentMeeting.endTime,\n            attendees: currentMeeting.attendees,\n            includeMeetLink: currentMeeting.includeMeetLink,\n            meetingId\n          }\n        }\n      };\n      \n      if (onAddAssistantMessage) {\n        onAddAssistantMessage(message);\n      }\n    }\n  };\n\n  const handleCreateEvent = async (meetingId: string) => {\n    const currentMeeting = meetingData[meetingId];\n    if (!currentMeeting) return;\n\n    try {\n      const response = await apiRequest('/api/calendar/events', {\n        method: 'POST',\n        body: JSON.stringify({\n          title: currentMeeting.title,\n          startTime: currentMeeting.startTime,\n          endTime: currentMeeting.endTime,\n          attendees: currentMeeting.attendees,\n          createMeetLink: currentMeeting.includeMeetLink,\n          description: `Meeting created via AI Calendar Assistant`\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.success) {\n        const successMessage: ChatMessage = {\n          id: `msg-${Date.now()}`,\n          role: 'assistant',\n          content: `🎉 Meeting created successfully! ${response.event.meetingLink ? `Google Meet link: ${response.event.meetingLink}` : ''} Calendar invites have been sent to all attendees.`,\n          timestamp: new Date()\n        };\n        \n        if (onAddAssistantMessage) {\n          onAddAssistantMessage(successMessage);\n        }\n        \n        // Clean up meeting data\n        setMeetingData(prev => {\n          const updated = { ...prev };\n          delete updated[meetingId];\n          return updated;\n        });\n      }\n    } catch (error) {\n      console.error('Error creating meeting:', error);\n      const errorMessage: ChatMessage = {\n        id: `msg-${Date.now()}`,\n        role: 'assistant',\n        content: 'Sorry, there was an error creating the meeting. Please try again.',\n        timestamp: new Date()\n      };\n      \n      if (onAddAssistantMessage) {\n        onAddAssistantMessage(errorMessage);\n      }\n    }\n  };\n\n  const handleEditField = (field: string, meetingId: string) => {\n    // Handle editing specific fields - could navigate back to appropriate UI block\n    console.log(`Editing ${field} for meeting ${meetingId}`);\n  };\n\n  return (\n    <Card className=\"h-full flex flex-col\">\n      <div className=\"p-4 border-b\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"p-2 bg-primary/10 rounded-lg\">\n            <Bot className=\"h-6 w-6 text-primary\" />\n          </div>\n          <div>\n            <h2 className=\"font-semibold\">AI Calendar Assistant</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              {getTimeBasedGreeting()}! How can I help you manage your calendar today?\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 flex flex-col min-h-0\">\n        <ScrollArea ref={scrollAreaRef} className=\"flex-1 p-4\">\n          <div className=\"space-y-4\">\n            {messages.length === 0 && (\n              <div className=\"space-y-4\">\n                <div className=\"text-center py-8\">\n                  <Sparkles className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\n                  <h3 className=\"font-medium mb-2\">Ready to help you schedule smarter</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Try asking me to schedule a meeting, generate an agenda, or get insights about your calendar\n                  </p>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"text-sm font-medium\">Quick Actions</h4>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleSurpriseMe}\n                      className=\"text-xs\"\n                      data-testid=\"button-surprise-me\"\n                    >\n                      <Sparkles className=\"h-3 w-3 mr-1\" />\n                      Surprise Me\n                    </Button>\n                  </div>\n                  <div className=\"grid gap-2\">\n                    {quickActions.map((action, index) => (\n                      <Button\n                        key={index}\n                        variant=\"ghost\"\n                        className=\"justify-start text-left h-auto py-2 px-3\"\n                        onClick={() => handleQuickAction(action)}\n                        data-testid={`button-quick-action-${index}`}\n                      >\n                        <span className=\"text-sm\">{action}</span>\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex gap-3 ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                data-testid={`message-${message.id}`}\n              >\n                {message.role === 'assistant' && (\n                  <Avatar className=\"h-8 w-8 mt-1\">\n                    <AvatarFallback className=\"bg-primary/10\">\n                      <Bot className=\"h-4 w-4 text-primary\" />\n                    </AvatarFallback>\n                  </Avatar>\n                )}\n                <div className={`max-w-[80%] ${message.role === 'user' ? 'order-first' : ''}`}>\n                  <div\n                    className={`rounded-lg px-4 py-2 ${\n                      message.role === 'user'\n                        ? 'bg-primary text-primary-foreground ml-auto'\n                        : 'bg-muted'\n                    }`}\n                  >\n                    <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                  </div>\n                  \n                  {/* Render interactive UI blocks for meeting creation */}\n                  {message.uiBlock && (\n                    <div className=\"mt-3\">\n                      <MeetingUIBlock\n                        uiBlock={message.uiBlock}\n                        onMeetingLinkChoice={handleMeetingLinkChoice}\n                        onAttendeesUpdate={handleAttendeesUpdate}\n                        onTitleSelect={handleTitleSelect}\n                        onCreateEvent={handleCreateEvent}\n                        onEditField={handleEditField}\n                      />\n                    </div>\n                  )}\n                  \n                  <div className={`flex items-center gap-2 mt-1 ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {format(message.timestamp, 'h:mm a')}\n                    </span>\n                    {message.role === 'user' && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {userName}\n                      </Badge>\n                    )}\n                    {message.metadata?.extraction && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        AI Meeting Detection\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                {message.role === 'user' && (\n                  <Avatar className=\"h-8 w-8 mt-1\">\n                    <AvatarImage src={userAvatar} />\n                    <AvatarFallback>\n                      <User className=\"h-4 w-4\" />\n                    </AvatarFallback>\n                  </Avatar>\n                )}\n              </div>\n            ))}\n            \n            {isLoading && (\n              <div className=\"flex gap-3 justify-start\">\n                <Avatar className=\"h-8 w-8 mt-1\">\n                  <AvatarFallback className=\"bg-primary/10\">\n                    <Bot className=\"h-4 w-4 text-primary\" />\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"bg-muted rounded-lg px-4 py-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    <span className=\"text-sm text-muted-foreground\">AI is thinking...</span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n\n        <div className=\"p-4 border-t\">\n          <div className=\"flex gap-2\">\n            <Textarea\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={handleKeyPress}\n              placeholder=\"Ask me anything about your calendar, meetings, or scheduling...\"\n              className=\"min-h-[44px] resize-none\"\n              data-testid=\"input-chat-message\"\n            />\n            <Button\n              onClick={handleSendMessage}\n              disabled={!input.trim() || isLoading}\n              size=\"icon\"\n              className=\"h-11 w-11\"\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":18142},"client/src/components/GoogleAuthButton.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Shield, Zap, Bot } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface GoogleAuthButtonProps {\n  onSignIn: () => void;\n  isLoading?: boolean;\n}\n\nexport function GoogleAuthButton({ onSignIn, isLoading = false }: GoogleAuthButtonProps) {\n  const [hoveredFeature, setHoveredFeature] = useState<string | null>(null);\n\n  const features = [\n    {\n      id: \"calendar\",\n      icon: Calendar,\n      title: \"Calendar Integration\",\n      description: \"Access and manage your Google Calendar events seamlessly\"\n    },\n    {\n      id: \"ai\",\n      icon: Bot,\n      title: \"AI Assistant\", \n      description: \"Intelligent scheduling and meeting management with conversation\"\n    },\n    {\n      id: \"automation\",\n      icon: Zap,\n      title: \"Smart Automation\",\n      description: \"Automated agenda generation, transcripts, and action item tracking\"\n    },\n    {\n      id: \"secure\",\n      icon: Shield,\n      title: \"Secure & Private\",\n      description: \"Your data stays protected with industry-standard OAuth security\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"max-w-4xl w-full\">\n        <div className=\"text-center mb-12\">\n          <div className=\"inline-flex items-center gap-2 mb-4\">\n            <div className=\"p-3 bg-primary/10 rounded-xl\">\n              <Bot className=\"h-8 w-8 text-primary\" />\n            </div>\n            <h1 className=\"text-4xl font-bold tracking-tight\">AI Calendar Assistant</h1>\n          </div>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Transform your meeting management with AI-powered scheduling, \n            automated workflows, and intelligent insights.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-8 items-start\">\n          <Card className=\"hover-elevate\">\n            <CardHeader className=\"text-center pb-6\">\n              <CardTitle className=\"text-2xl mb-2\">Get Started</CardTitle>\n              <p className=\"text-muted-foreground\">\n                Connect your Google account to unlock powerful calendar management\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"p-6 bg-muted/30 rounded-lg text-center\">\n                <svg viewBox=\"0 0 24 24\" className=\"w-8 h-8 mx-auto mb-3\">\n                  <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                  <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                  <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                  <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                </svg>\n                <h3 className=\"font-semibold mb-2\">Sign in with Google</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Secure OAuth authentication - we only access your calendar with your permission\n                </p>\n              </div>\n\n              <Button \n                onClick={onSignIn}\n                disabled={isLoading}\n                size=\"lg\"\n                className=\"w-full\"\n                data-testid=\"button-google-signin\"\n              >\n                {isLoading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\" />\n                    Connecting...\n                  </>\n                ) : (\n                  <>\n                    <svg viewBox=\"0 0 24 24\" className=\"w-4 h-4 mr-2\">\n                      <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                      <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                      <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                      <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                    </svg>\n                    Continue with Google\n                  </>\n                )}\n              </Button>\n\n              <div className=\"flex items-center justify-center gap-2 text-xs text-muted-foreground\">\n                <Shield className=\"h-3 w-3\" />\n                Your privacy is protected\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-4\">\n            <h2 className=\"text-xl font-semibold mb-4\">What you'll get:</h2>\n            {features.map((feature) => {\n              const Icon = feature.icon;\n              return (\n                <Card \n                  key={feature.id}\n                  className={`cursor-pointer transition-all hover-elevate ${\n                    hoveredFeature === feature.id ? 'ring-2 ring-primary/20' : ''\n                  }`}\n                  onMouseEnter={() => setHoveredFeature(feature.id)}\n                  onMouseLeave={() => setHoveredFeature(null)}\n                  data-testid={`feature-card-${feature.id}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"p-2 bg-primary/10 rounded-lg\">\n                        <Icon className=\"h-5 w-5 text-primary\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-medium mb-1\">{feature.title}</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {feature.description}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n            \n            <div className=\"pt-4\">\n              <div className=\"flex flex-wrap gap-2\">\n                <Badge variant=\"secondary\" className=\"text-xs\">Free to use</Badge>\n                <Badge variant=\"secondary\" className=\"text-xs\">No credit card required</Badge>\n                <Badge variant=\"secondary\" className=\"text-xs\">Instant setup</Badge>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7058},"client/src/components/TaskBoard.tsx":{"content":"import { Clock, User, Calendar, CheckCircle, Circle, AlertCircle, Plus } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { format, isPast } from \"date-fns\";\nimport { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface Task {\n  id: string;\n  title: string;\n  description?: string;\n  assignee: string;\n  deadline?: Date;\n  status: 'pending' | 'in_progress' | 'completed';\n  eventTitle?: string;\n}\n\ninterface TaskBoardProps {\n  tasks: Task[];\n  onUpdateTaskStatus: (taskId: string, status: Task['status']) => void;\n  onTaskClick: (task: Task) => void;\n  onAddTask?: (task: Omit<Task, 'id' | 'status'>) => void; // New prop for adding tasks\n}\n\n// Sample assignees - in a real app, this would come from your user management system\nconst sampleAssignees = [\n  \"Sarah Johnson\",\n  \"Mike Chen\",\n  \"Alex Rodriguez\",\n  \"Emma Wilson\",\n  \"David Kim\"\n];\n\nconst statusColumns = [\n  { \n    status: 'pending' as const, \n    title: 'To Do', \n    color: 'text-muted-foreground',\n    bgColor: 'bg-muted/20'\n  },\n  { \n    status: 'in_progress' as const, \n    title: 'In Progress', \n    color: 'text-blue-600 dark:text-blue-400',\n    bgColor: 'bg-blue-50 dark:bg-blue-950/20'\n  },\n  { \n    status: 'completed' as const, \n    title: 'Completed', \n    color: 'text-green-600 dark:text-green-400',\n    bgColor: 'bg-green-50 dark:bg-green-950/20'\n  }\n];\n\nexport function TaskBoard({ tasks, onUpdateTaskStatus, onTaskClick, onAddTask }: TaskBoardProps) {\n  const [isAddTaskOpen, setIsAddTaskOpen] = useState(false);\n  const [newTask, setNewTask] = useState({\n    title: '',\n    description: '',\n    assignee: sampleAssignees[0],\n    eventTitle: ''\n  });\n\n  const getTasksByStatus = (status: Task['status']) => {\n    return tasks.filter(task => task.status === status);\n  };\n\n  const getStatusIcon = (status: Task['status']) => {\n    switch (status) {\n      case 'pending':\n        return <Circle className=\"h-4 w-4\" />;\n      case 'in_progress':\n        return <AlertCircle className=\"h-4 w-4\" />;\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  const isTaskOverdue = (task: Task) => {\n    return task.deadline && task.status !== 'completed' && isPast(task.deadline);\n  };\n\n  const handleAddTask = () => {\n    if (newTask.title.trim() && onAddTask) {\n      onAddTask({\n        title: newTask.title,\n        description: newTask.description,\n        assignee: newTask.assignee,\n        eventTitle: newTask.eventTitle\n      });\n      // Reset form\n      setNewTask({\n        title: '',\n        description: '',\n        assignee: sampleAssignees[0],\n        eventTitle: ''\n      });\n      setIsAddTaskOpen(false);\n    }\n  };\n\n  return (\n    <div className=\"h-full\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 h-full\">\n        {statusColumns.map((column) => {\n          const columnTasks = getTasksByStatus(column.status);\n          \n          return (\n            <Card key={column.status} className=\"h-fit lg:h-full\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className={`text-base flex items-center justify-between ${column.color}`}>\n                  <div className=\"flex items-center gap-2\">\n                    {getStatusIcon(column.status)}\n                    {column.title}\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {column.status === 'pending' && onAddTask && (\n                      <Dialog open={isAddTaskOpen} onOpenChange={setIsAddTaskOpen}>\n                        <DialogTrigger asChild>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\"\n                            className=\"h-6 w-6 p-0\"\n                            onClick={(e) => e.stopPropagation()}\n                          >\n                            <Plus className=\"h-4 w-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent \n                          className=\"sm:max-w-[425px]\"\n                          onClick={(e) => e.stopPropagation()}\n                        >\n                          <DialogHeader>\n                            <DialogTitle>Add New Task</DialogTitle>\n                            <DialogDescription>\n                              Create a new task to track your work and assign it to a team member.\n                            </DialogDescription>\n                          </DialogHeader>\n                          <div className=\"grid gap-4 py-4\">\n                            <div className=\"grid grid-cols-4 items-center gap-4\">\n                              <label htmlFor=\"title\" className=\"text-right text-sm font-medium\">\n                                Title\n                              </label>\n                              <div className=\"col-span-3\">\n                                <Input\n                                  id=\"title\"\n                                  value={newTask.title}\n                                  onChange={(e) => setNewTask({...newTask, title: e.target.value})}\n                                  placeholder=\"Task title\"\n                                  className=\"w-full\"\n                                />\n                              </div>\n                            </div>\n                            <div className=\"grid grid-cols-4 items-center gap-4\">\n                              <label htmlFor=\"description\" className=\"text-right text-sm font-medium\">\n                                Description\n                              </label>\n                              <div className=\"col-span-3\">\n                                <Textarea\n                                  id=\"description\"\n                                  value={newTask.description}\n                                  onChange={(e) => setNewTask({...newTask, description: e.target.value})}\n                                  placeholder=\"Task description\"\n                                  className=\"w-full\"\n                                />\n                              </div>\n                            </div>\n                            <div className=\"grid grid-cols-4 items-center gap-4\">\n                              <label htmlFor=\"event\" className=\"text-right text-sm font-medium\">\n                                Event\n                              </label>\n                              <div className=\"col-span-3\">\n                                <Input\n                                  id=\"event\"\n                                  value={newTask.eventTitle}\n                                  onChange={(e) => setNewTask({...newTask, eventTitle: e.target.value})}\n                                  placeholder=\"Related event (optional)\"\n                                  className=\"w-full\"\n                                />\n                              </div>\n                            </div>\n                            <div className=\"grid grid-cols-4 items-center gap-4\">\n                              <label htmlFor=\"assignee\" className=\"text-right text-sm font-medium\">\n                                Assignee\n                              </label>\n                              <div className=\"col-span-3\">\n                                <Select \n                                  value={newTask.assignee} \n                                  onValueChange={(value) => setNewTask({...newTask, assignee: value})}\n                                >\n                                  <SelectTrigger className=\"w-full\">\n                                    <SelectValue placeholder=\"Select assignee\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {sampleAssignees.map((assignee) => (\n                                      <SelectItem key={assignee} value={assignee}>\n                                        {assignee}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex justify-end gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              onClick={() => setIsAddTaskOpen(false)}\n                            >\n                              Cancel\n                            </Button>\n                            <Button \n                              onClick={handleAddTask}\n                              disabled={!newTask.title.trim()}\n                            >\n                              Add Task\n                            </Button>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    )}\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {columnTasks.length}\n                    </Badge>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-3 max-h-[calc(100vh-300px)] overflow-y-auto\">\n                  {columnTasks.map((task) => (\n                    <Card\n                      key={task.id}\n                      className={`cursor-pointer hover-elevate transition-colors ${column.bgColor}`}\n                      onClick={() => onTaskClick(task)}\n                      data-testid={`task-card-${task.id}`}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"space-y-3\">\n                          <div>\n                            <h4 className=\"font-medium text-sm line-clamp-2\">\n                              {task.title}\n                            </h4>\n                            {task.description && (\n                              <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                                {task.description}\n                              </p>\n                            )}\n                          </div>\n\n                          {task.eventTitle && (\n                            <div className=\"flex items-center gap-1.5\">\n                              <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                              <span className=\"text-xs text-muted-foreground truncate\">\n                                {task.eventTitle}\n                              </span>\n                            </div>\n                          )}\n\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-2\">\n                              <Avatar className=\"h-6 w-6\">\n                                <AvatarFallback className=\"text-xs\">\n                                  {task.assignee.split(' ').map(n => n[0]).join('').slice(0, 2)}\n                                </AvatarFallback>\n                              </Avatar>\n                              <span className=\"text-xs text-muted-foreground\">\n                                {task.assignee}\n                              </span>\n                            </div>\n\n                            {task.deadline && (\n                              <div className={`flex items-center gap-1 ${isTaskOverdue(task) ? 'text-destructive' : 'text-muted-foreground'}`}>\n                                <Clock className=\"h-3 w-3\" />\n                                <span className=\"text-xs\">\n                                  {format(task.deadline, 'MMM d')}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n\n                          <div className=\"flex gap-1\">\n                            {column.status !== 'completed' && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"h-6 px-2 text-xs\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  const nextStatus = column.status === 'pending' ? 'in_progress' : 'completed';\n                                  onUpdateTaskStatus(task.id, nextStatus);\n                                }}\n                                data-testid={`button-update-task-${task.id}`}\n                              >\n                                {column.status === 'pending' ? 'Start' : 'Complete'}\n                              </Button>\n                            )}\n                            {column.status === 'completed' && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\" \n                                className=\"h-6 px-2 text-xs\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  onUpdateTaskStatus(task.id, 'in_progress');\n                                }}\n                                data-testid={`button-reopen-task-${task.id}`}\n                              >\n                                Reopen\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n\n                  {columnTasks.length === 0 && (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <div className=\"opacity-50 mb-2\">\n                        {getStatusIcon(column.status)}\n                      </div>\n                      <p className=\"text-sm\">No {column.title.toLowerCase()} tasks</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":14691},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(\n  undefined,\n);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n}: {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n}) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(\"theme\") as Theme) || defaultTheme,\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(\"theme\", theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1411},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  const toggleTheme = () => {\n    if (theme === \"light\") {\n      setTheme(\"dark\");\n    } else if (theme === \"dark\") {\n      setTheme(\"system\");\n    } else {\n      setTheme(\"light\");\n    }\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"h-9 w-9\"\n    >\n      <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":843},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { CalendarSidebar } from '@/components/CalendarSidebar';\nimport { ChatInterface } from '@/components/ChatInterface';\nimport { TaskBoard } from '@/components/TaskBoard';\nimport { ThemeToggle } from '@/components/ThemeToggle';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Bot, Calendar, CheckSquare, User, LogOut } from 'lucide-react';\nimport { addDays, addHours } from 'date-fns';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\n\n// Mock data - todo: remove mock functionality when real API is connected\n\nconst mockTasks = [\n  {\n    id: '1',\n    title: 'Prepare quarterly business review presentation',\n    description: 'Create slides covering Q3 metrics, achievements, and Q4 roadmap',\n    assignee: 'Sarah Johnson',\n    deadline: addDays(new Date(), 3),\n    status: 'pending' as const,\n    eventTitle: 'Q3 Business Review Meeting'\n  },\n  {\n    id: '2',\n    title: 'Review API documentation',\n    description: 'Go through the new authentication endpoints and update integration',\n    assignee: 'Mike Chen',\n    deadline: addDays(new Date(), 1),\n    status: 'in_progress' as const,\n    eventTitle: 'API Integration Sync'\n  },\n  {\n    id: '3',\n    title: 'Send follow-up email to clients',\n    description: 'Include meeting summary and next steps from discussion',\n    assignee: 'Sarah Johnson',\n    status: 'completed' as const,\n    eventTitle: 'Client Strategy Meeting'\n  }\n];\n\n// Define the event type\ninterface CalendarEvent {\n  id: string;\n  googleEventId?: string;\n  title: string;\n  description?: string;\n  startTime: Date;\n  endTime: Date;\n  meetingLink?: string;\n  attendees: string[];\n}\n\ninterface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\ninterface Task {\n  id: string;\n  title: string;\n  description?: string;\n  assignee: string;\n  deadline?: Date;\n  status: 'pending' | 'in_progress' | 'completed';\n  eventTitle?: string;\n}\n\nexport default function Dashboard() {\n  const { user, logout, isLoggingOut } = useAuth();\n  const queryClient = useQueryClient();\n  const [tasks, setTasks] = useState<Task[]>(mockTasks);\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sidebarWidth, setSidebarWidth] = useState(320); // 320px = 80 * 4 (w-80 in Tailwind)\n  const [isResizing, setIsResizing] = useState(false);\n  const sidebarRef = useRef<HTMLDivElement>(null);\n  \n  // Set the initial greeting message with the user's name\n  useEffect(() => {\n    if (user?.name) {\n      const greeting = `Good ${new Date().getHours() < 12 ? 'morning' : new Date().getHours() < 17 ? 'afternoon' : 'evening'}, ${user.name}! 🌟 I'm your AI Calendar Assistant. I can help you schedule meetings, manage your calendar, and automate your meeting workflows. What would you like to work on today?`;\n      \n      setChatMessages([{\n        id: '1',\n        role: 'assistant',\n        content: greeting,\n        timestamp: new Date()\n      }]);\n    }\n  }, [user?.name]);\n\n  // Fetch calendar events\n  const { data: events = [], isLoading: isEventsLoading, isError, error } = useQuery({\n    queryKey: ['calendarEvents'],\n    queryFn: async (): Promise<CalendarEvent[]> => {\n      const response = await fetch('/api/calendar/events', {\n        credentials: 'include'\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch calendar events');\n      }\n      \n      const data = await response.json();\n      // Convert date strings to Date objects\n      return data.events.map((event: any) => ({\n        ...event,\n        startTime: new Date(event.startTime),\n        endTime: new Date(event.endTime)\n      }));\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnWindowFocus: true,\n  });\n\n  const handleDeleteEvent = async (eventId: string) => {\n    // Show confirmation dialog\n    const confirmed = window.confirm('Are you sure you want to delete this event? This action cannot be undone.');\n    \n    if (!confirmed) {\n      return; // User cancelled the deletion\n    }\n\n    try {\n      const response = await fetch(`/api/calendar/events/${eventId}`, {\n        method: 'DELETE',\n        credentials: 'include'\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete event');\n      }\n\n      // Refresh the events\n      queryClient.invalidateQueries({ queryKey: ['calendarEvents'] });\n      \n      // Show success message in chat\n      const successMessage: ChatMessage = {\n        id: Date.now().toString(),\n        role: 'assistant',\n        content: 'I\\'ve successfully deleted the event from your calendar.',\n        timestamp: new Date()\n      };\n      setChatMessages(prev => [...prev, successMessage]);\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      // Show error message in chat\n      const errorMessage: ChatMessage = {\n        id: Date.now().toString(),\n        role: 'assistant',\n        content: 'Sorry, I couldn\\'t delete the event. Please try again.',\n        timestamp: new Date()\n      };\n      setChatMessages(prev => [...prev, errorMessage]);\n    }\n  };\n\n  const handleEventClick = (event: CalendarEvent) => {\n    const message = `Tell me about my \"${event.title}\" meeting.`;\n    handleSendMessage(message);\n  };\n\n  const handleSendMessage = async (message: string) => {\n    const newMessage: ChatMessage = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: message,\n      timestamp: new Date()\n    };\n    \n    // Add user message immediately\n    setChatMessages(prev => [...prev, newMessage]);\n    setIsLoading(true);\n    \n    try {\n      // Prepare messages for the AI (excluding the new user message)\n      const messagesForAI = chatMessages.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n      \n      // Add the new user message\n      messagesForAI.push({\n        role: 'user',\n        content: message\n      });\n      \n      // Call the Mistral API endpoint\n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ messages: messagesForAI })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to get response from AI');\n      }\n      \n      const data = await response.json();\n      \n      // Add AI response to chat\n      const aiMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: data.response,\n        timestamp: new Date()\n      };\n      setChatMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      // Show error message in chat\n      const errorMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: 'Sorry, I encountered an error processing your request. Please try again.',\n        timestamp: new Date()\n      };\n      setChatMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleUpdateTaskStatus = (taskId: string, status: 'pending' | 'in_progress' | 'completed') => {\n    const updatedTasks = tasks.map(task => \n      task.id === taskId ? { ...task, status } : task\n    );\n    setTasks(updatedTasks);\n    console.log('Task updated:', taskId, status);\n  };\n\n  const handleTaskClick = (task: Task) => {\n    const message = `Give me more details about the task: \"${task.title}\"`;\n    handleSendMessage(message);\n  };\n\n  const handleAddTask = (newTask: Omit<Task, 'id' | 'status'>) => {\n    const task: Task = {\n      ...newTask,\n      id: `task-${Date.now()}`,\n      status: 'pending'\n    };\n    setTasks(prev => [...prev, task]);\n    console.log('Task added:', task);\n  };\n\n  const handleSignOut = () => {\n    logout();\n  };\n\n  // Resizing functionality\n  const startResizing = (e: React.MouseEvent) => {\n    e.preventDefault();\n    setIsResizing(true);\n  };\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!isResizing) return;\n      \n      // Calculate new width based on mouse position\n      const newWidth = e.clientX;\n      \n      // Set minimum and maximum width constraints\n      if (newWidth > 200 && newWidth < 600) {\n        setSidebarWidth(newWidth);\n      }\n    };\n\n    const handleMouseUp = () => {\n      setIsResizing(false);\n    };\n\n    if (isResizing) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    }\n\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isResizing]);\n\n  return (\n    <div className=\"h-screen bg-background flex flex-col\">\n      {/* Header */}\n      <header className=\"border-b bg-card\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 bg-primary/10 rounded-lg\">\n              <Bot className=\"h-6 w-6 text-primary\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-semibold\">AI Calendar Assistant</h1>\n              <p className=\"text-sm text-muted-foreground\">Intelligent meeting management</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {events.length} upcoming events\n            </Badge>\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {tasks.filter(t => t.status !== 'completed').length} active tasks\n            </Badge>\n            <ThemeToggle />\n            <div className=\"flex items-center gap-2\">\n              <Avatar className=\"h-8 w-8\">\n                <AvatarImage src={user?.picture} />\n                <AvatarFallback>\n                  <User className=\"h-4 w-4\" />\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"text-sm\">\n                <div className=\"font-medium\">{user?.name || 'User'}</div>\n                <div className=\"text-muted-foreground text-xs\">{user?.email || ''}</div>\n              </div>\n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                onClick={handleSignOut}\n                disabled={isLoggingOut}\n                data-testid=\"button-sign-out\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex min-h-0\">\n        {/* Calendar Sidebar Container */}\n        <div \n          ref={sidebarRef}\n          className=\"relative h-full flex\"\n          style={{ width: `${sidebarWidth}px` }}\n        >\n          {/* Sidebar Background - Full Height */}\n          <div className=\"absolute inset-0 border-r bg-card\"></div>\n          \n          {/* Sidebar Content - Scrollable with infinite padding */}\n          <aside \n            className=\"relative z-10 h-full w-full overflow-y-auto\"\n            data-testid=\"sidebar-scroll-area\"\n          >\n            <div className=\"p-4 min-h-full\">\n              <CalendarSidebar \n                events={events}\n                onDeleteEvent={handleDeleteEvent}\n                onEventClick={handleEventClick}\n              />\n            </div>\n          </aside>\n          \n          {/* Resizer handle */}\n          <div\n            className=\"absolute top-0 right-0 h-full w-2 cursor-col-resize bg-transparent hover:bg-primary/20 transition-colors z-20\"\n            onMouseDown={startResizing}\n          />\n        </div>\n\n        {/* Main Panel */}\n        <main \n          className=\"flex-1 overflow-y-auto\"\n          data-testid=\"main-scroll-area\"\n        >\n          <Tabs defaultValue=\"chat\" className=\"h-full flex flex-col\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"chat\" className=\"flex items-center gap-2\">\n                <Bot className=\"h-4 w-4\" />\n                AI Assistant\n              </TabsTrigger>\n              <TabsTrigger value=\"tasks\" className=\"flex items-center gap-2\">\n                <CheckSquare className=\"h-4 w-4\" />\n                Task Boards\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"chat\" className=\"flex-1 mt-0 h-full\">\n              <Card className=\"h-full flex flex-col\">\n                <CardHeader className=\"pb-4 border-b\">\n                  <CardTitle className=\"flex items-center gap-2 text-lg\">\n                    <Bot className=\"h-5 w-5\" />\n                    AI Calendar Assistant\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"flex-1 p-0\">\n                  <ChatInterface\n                    messages={chatMessages}\n                    onSendMessage={handleSendMessage}\n                    isLoading={isLoading}\n                    userName={user?.name || 'User'}\n                    userAvatar={user?.picture}\n                  />\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"tasks\" className=\"flex-1 mt-0 h-full\">\n              <Card className=\"h-full flex flex-col\">\n                <CardHeader className=\"pb-4 border-b\">\n                  <CardTitle className=\"flex items-center gap-2 text-lg\">\n                    <CheckSquare className=\"h-5 w-5\" />\n                    Action Plans & Tasks\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"flex-1 p-0\">\n                  <TaskBoard\n                    tasks={tasks}\n                    onUpdateTaskStatus={handleUpdateTaskStatus}\n                    onTaskClick={handleTaskClick}\n                    onAddTask={handleAddTask}\n                  />\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":14495},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/CalendarSidebar.tsx":{"content":"import { CalendarSidebar } from '../CalendarSidebar';\nimport { addDays, addHours } from 'date-fns';\n\n//todo: remove mock functionality\nconst mockEvents = [\n  {\n    id: '1',\n    title: 'Daily Standup',\n    startTime: new Date(),\n    endTime: addHours(new Date(), 0.5),\n    attendees: ['john@example.com', 'sarah@example.com'],\n    meetingLink: 'https://meet.google.com/abc-defg-hij',\n    description: 'Quick sync on sprint progress and blockers'\n  },\n  {\n    id: '2', \n    title: 'Client Demo Preparation',\n    startTime: addHours(new Date(), 2),\n    endTime: addHours(new Date(), 3),\n    attendees: ['client@example.com', 'pm@example.com'],\n    description: 'Prepare slides and demo environment for Friday presentation'\n  },\n  {\n    id: '3',\n    title: 'Design Review Meeting',\n    startTime: addDays(new Date(), 1),\n    endTime: addDays(addHours(new Date(), 1), 1),\n    attendees: ['designer@example.com', 'dev@example.com'],\n    meetingLink: 'https://zoom.us/j/123456789',\n    description: 'Review new mockups for the user dashboard'\n  },\n  {\n    id: '4',\n    title: '1:1 with Manager',\n    startTime: addDays(new Date(), 2),\n    endTime: addDays(addHours(new Date(), 0.5), 2),\n    attendees: ['manager@example.com']\n  }\n];\n\nexport default function CalendarSidebarExample() {\n  const handleDeleteEvent = (eventId: string) => {\n    console.log('Delete event:', eventId);\n  };\n\n  const handleEventClick = (event: any) => {\n    console.log('Event clicked:', event);\n  };\n\n  return (\n    <div className=\"h-[600px] w-[350px]\">\n      <CalendarSidebar \n        events={mockEvents}\n        onDeleteEvent={handleDeleteEvent}\n        onEventClick={handleEventClick}\n      />\n    </div>\n  );\n}","size_bytes":1684},"client/src/components/examples/ChatInterface.tsx":{"content":"import { ChatInterface } from '../ChatInterface';\nimport { useState } from 'react';\n\n//todo: remove mock functionality  \nconst mockMessages = [\n  {\n    id: '1',\n    role: 'user' as const,\n    content: 'Can you schedule a meeting with the design team for next Tuesday?',\n    timestamp: new Date(Date.now() - 10 * 60 * 1000)\n  },\n  {\n    id: '2', \n    role: 'assistant' as const,\n    content: 'I\\'d be happy to help you schedule a meeting with the design team! I found a few available time slots on Tuesday:\\n\\n• 10:00 AM - 11:00 AM\\n• 2:00 PM - 3:00 PM  \\n• 4:00 PM - 5:00 PM\\n\\nWhich time works best for you? Also, should I include a meeting link and send calendar invites to the team?',\n    timestamp: new Date(Date.now() - 9 * 60 * 1000)\n  },\n  {\n    id: '3',\n    role: 'user' as const, \n    content: '2:00 PM works great. Please include a Google Meet link and invite sarah@company.com and mike@company.com',\n    timestamp: new Date(Date.now() - 5 * 60 * 1000)\n  }\n];\n\nexport default function ChatInterfaceExample() {\n  const [messages, setMessages] = useState(mockMessages);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSendMessage = (message: string) => {\n    const newMessage = {\n      id: Date.now().toString(),\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date()\n    };\n    \n    setMessages(prev => [...prev, newMessage]);\n    setIsLoading(true);\n    \n    // Simulate AI response\n    setTimeout(() => {\n      const aiResponse = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant' as const,\n        content: 'Perfect! I\\'ve scheduled your meeting for Tuesday at 2:00 PM with the design team. A Google Meet link has been created and calendar invites have been sent to sarah@company.com and mike@company.com. The meeting is titled \"Design Team Sync\" - would you like me to generate an agenda as well?',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiResponse]);\n      setIsLoading(false);\n    }, 2000);\n  };\n\n  return (\n    <div className=\"h-[600px] w-[500px]\">\n      <ChatInterface\n        messages={messages}\n        onSendMessage={handleSendMessage}\n        isLoading={isLoading}\n        userName=\"Alex\"\n      />\n    </div>\n  );\n}","size_bytes":2242},"client/src/components/examples/GoogleAuthButton.tsx":{"content":"import { GoogleAuthButton } from '../GoogleAuthButton';\nimport { useState } from 'react';\n\nexport default function GoogleAuthButtonExample() {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSignIn = () => {\n    setIsLoading(true);\n    // Simulate OAuth flow\n    setTimeout(() => {\n      console.log('Google OAuth sign-in initiated');\n      setIsLoading(false);\n    }, 2000);\n  };\n\n  return (\n    <GoogleAuthButton \n      onSignIn={handleSignIn}\n      isLoading={isLoading}\n    />\n  );\n}","size_bytes":507},"client/src/components/examples/TaskBoard.tsx":{"content":"import { TaskBoard } from '../TaskBoard';\nimport { useState } from 'react';\nimport { addDays } from 'date-fns';\n\n//todo: remove mock functionality\nconst mockTasks = [\n  {\n    id: '1',\n    title: 'Prepare quarterly business review presentation',\n    description: 'Create slides covering Q3 metrics, achievements, and Q4 roadmap',\n    assignee: 'Sarah Johnson',\n    deadline: addDays(new Date(), 3),\n    status: 'pending' as const,\n    eventTitle: 'Q3 Business Review Meeting'\n  },\n  {\n    id: '2',\n    title: 'Review API documentation',\n    description: 'Go through the new authentication endpoints and update integration',\n    assignee: 'Mike Chen',\n    deadline: addDays(new Date(), 1),\n    status: 'in_progress' as const,\n    eventTitle: 'API Integration Sync'\n  },\n  {\n    id: '3',\n    title: 'Design mockups for mobile app',\n    assignee: 'Alex Rivera',\n    deadline: addDays(new Date(), 7),\n    status: 'pending' as const,\n    eventTitle: 'Design Review Session'\n  },\n  {\n    id: '4',\n    title: 'Send follow-up email to clients',\n    description: 'Include meeting summary and next steps from today\\'s discussion',\n    assignee: 'Sarah Johnson',\n    status: 'completed' as const,\n    eventTitle: 'Client Strategy Meeting'\n  },\n  {\n    id: '5',\n    title: 'Update project timeline',\n    description: 'Adjust milestones based on team capacity discussion',\n    assignee: 'Mike Chen',\n    status: 'completed' as const,\n    eventTitle: 'Sprint Planning Meeting'\n  },\n  {\n    id: '6',\n    title: 'Research competitive analysis',\n    assignee: 'Alex Rivera',\n    deadline: addDays(new Date(), -1), // Overdue task\n    status: 'in_progress' as const,\n    eventTitle: 'Product Strategy Session'\n  }\n];\n\nexport default function TaskBoardExample() {\n  const [tasks, setTasks] = useState(mockTasks);\n\n  const handleUpdateTaskStatus = (taskId: string, status: 'pending' | 'in_progress' | 'completed') => {\n    setTasks(prev => prev.map(task => \n      task.id === taskId ? { ...task, status } : task\n    ));\n    console.log('Updated task:', taskId, 'to status:', status);\n  };\n\n  const handleTaskClick = (task: any) => {\n    console.log('Task clicked:', task);\n  };\n\n  return (\n    <div className=\"h-[600px] w-full max-w-6xl\">\n      <TaskBoard\n        tasks={tasks}\n        onUpdateTaskStatus={handleUpdateTaskStatus}\n        onTaskClick={handleTaskClick}\n      />\n    </div>\n  );\n}","size_bytes":2373},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeProvider } from '../ThemeProvider';\nimport { ThemeToggle } from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-4 space-y-4\">\n        <h3 className=\"text-lg font-semibold\">Theme Toggle</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Click to cycle through light → dark → system theme\n        </p>\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  );\n}","size_bytes":473},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# AI Calendar Assistant\n\n## Overview\n\nAI Calendar Assistant is a web application that integrates with Google Calendar to provide intelligent meeting management through conversational AI. The application combines calendar visualization, AI-powered scheduling assistance, and automated task management to streamline meeting workflows. Built with React on the frontend and Express.js on the backend, it features a modern UI using shadcn/ui components and Material Design principles.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for build tooling\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system following Material Design principles\n- **State Management**: TanStack Query for server state and local React state for UI\n- **Routing**: Wouter for lightweight client-side routing\n- **Theme System**: Custom theme provider supporting light/dark/system modes\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js web framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with `/api` prefix routing\n- **Session Management**: Express sessions with PostgreSQL session store\n- **Development**: Hot module replacement via Vite middleware in development\n\n### Database Design\n- **Primary Database**: PostgreSQL with Drizzle ORM\n- **Schema Structure**:\n  - Users table with Google OAuth integration (googleId, tokens, profile data)\n  - Events table linking to Google Calendar events with AI enhancements\n  - Tasks table for action items extracted from meetings\n  - Chat messages table for conversational AI history\n- **Migration System**: Drizzle Kit for schema migrations and database management\n\n### Authentication & Authorization\n- **OAuth Provider**: Google OAuth 2.0 for calendar access\n- **Token Management**: Access and refresh tokens stored securely in database\n- **Session Storage**: PostgreSQL-backed session management\n- **Security**: HTTPS enforcement and secure cookie handling\n\n### AI Integration Architecture\n- **Chat Interface**: Conversational AI for natural language scheduling and queries\n- **Features**: Event scheduling, agenda generation, meeting summaries, and task extraction\n- **State Management**: React Query for chat message caching and optimistic updates\n\n### Design System\n- **Color Palette**: Material Design-inspired with deep blue primary, green secondary\n- **Typography**: Inter font family with structured scale (H1: 30px, H2: 20px, Body: 14px)\n- **Layout**: Three-column desktop layout (sidebar, main content, right panel) with responsive mobile design\n- **Component Library**: Comprehensive UI components for calendar, chat, tasks, and authentication\n\n## External Dependencies\n\n### Google Services\n- **Google Calendar API**: Full calendar read/write access for event management\n- **Google OAuth 2.0**: User authentication and authorization\n- **Google People API**: User profile information and avatar\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database operations and schema management\n\n### Communication Services\n- **SendGrid**: Email delivery for notifications and meeting invitations\n\n### Frontend Libraries\n- **Radix UI**: Unstyled, accessible component primitives\n- **TanStack Query**: Server state management and caching\n- **Tailwind CSS**: Utility-first CSS framework\n- **React Hook Form**: Form state management and validation\n- **date-fns**: Date manipulation and formatting\n\n### Development Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Static type checking and enhanced developer experience\n- **ESBuild**: Fast bundling for production builds\n- **Replit Integration**: Development environment plugins for cartographer and dev banner","size_bytes":3934},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { storage } from \"./storage\";\nimport type { User } from \"../shared/schema\";\n\n// Configure Google OAuth Strategy\npassport.use(new GoogleStrategy({\n  clientID: process.env.GOOGLE_CLIENT_ID!,\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n  callbackURL: \"/api/auth/google/callback\"\n}, async (accessToken, refreshToken, profile, done) => {\n  try {\n    console.log('Google OAuth callback triggered for user:', profile.displayName);\n    const googleId = profile.id;\n    let user = await storage.getUserByGoogleId(googleId);\n    \n    if (user) {\n      // Update tokens for existing user\n      console.log('Updating existing user tokens');\n      await storage.updateUserTokens(googleId, accessToken, refreshToken);\n      user.accessToken = accessToken;\n      user.refreshToken = refreshToken;\n      return done(null, user);\n    } else {\n      // Create new user\n      console.log('Creating new user');\n      const newUser = await storage.createUser({\n        googleId,\n        email: profile.emails?.[0]?.value || '',\n        name: profile.displayName || '',\n        picture: profile.photos?.[0]?.value,\n        accessToken,\n        refreshToken\n      });\n      console.log('New user created:', newUser.id);\n      return done(null, newUser);\n    }\n  } catch (error) {\n    console.error('OAuth callback error:', error);\n    return done(error, undefined);\n  }\n}));\n\n// Serialize user for session\npassport.serializeUser((user: any, done) => {\n  done(null, user.id);\n});\n\n// Deserialize user from session\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await storage.getUser(id);\n    done(null, user);\n  } catch (error) {\n    done(error, null);\n  }\n});","size_bytes":1786},"server/googleCalendar.ts":{"content":"import { google } from 'googleapis';\nimport { User } from '../shared/schema';\n\n// Scopes required for calendar access\nconst SCOPES = ['https://www.googleapis.com/auth/calendar'];\n\n/**\n * Get Google Calendar API client\n */\nfunction getCalendarClient(accessToken: string) {\n  const oauth2Client = new google.auth.OAuth2();\n  oauth2Client.setCredentials({ access_token: accessToken });\n  return google.calendar({ version: 'v3', auth: oauth2Client });\n}\n\n/**\n * Fetch upcoming events from Google Calendar\n */\nexport async function fetchUpcomingEvents(user: User, maxResults: number = 10) {\n  try {\n    if (!user.accessToken) {\n      throw new Error('User access token is missing');\n    }\n\n    const calendar = getCalendarClient(user.accessToken);\n    \n    const res = await calendar.events.list({\n      calendarId: 'primary',\n      timeMin: new Date().toISOString(),\n      maxResults: maxResults,\n      singleEvents: true,\n      orderBy: 'startTime',\n    });\n\n    const events = res.data.items || [];\n    \n    // Transform Google Calendar events to our format\n    return events.map(event => ({\n      id: event.id || '',\n      googleEventId: event.id || '',\n      title: event.summary || 'No Title',\n      description: event.description || '',\n      startTime: event.start?.dateTime ? new Date(event.start.dateTime) : \n                event.start?.date ? new Date(event.start.date) : new Date(),\n      endTime: event.end?.dateTime ? new Date(event.end.dateTime) : \n              event.end?.date ? new Date(event.end.date) : new Date(),\n      meetingLink: event.hangoutLink || event.location || '',\n      attendees: event.attendees?.map(attendee => attendee.email || '') || [],\n      status: event.status\n    }));\n  } catch (error) {\n    console.error('Error fetching calendar events:', error);\n    throw new Error('Failed to fetch calendar events');\n  }\n}\n\n/**\n * Create a new event in Google Calendar with optional Google Meet link\n */\nexport async function createCalendarEvent(user: User, event: any, createMeetLink: boolean = false) {\n  try {\n    if (!user.accessToken) {\n      throw new Error('User access token is missing');\n    }\n\n    const calendar = getCalendarClient(user.accessToken);\n    \n    const newEvent: any = {\n      summary: event.title,\n      description: event.description,\n      start: {\n        dateTime: event.startTime,\n        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      },\n      end: {\n        dateTime: event.endTime,\n        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      },\n      attendees: event.attendees?.map((attendee: any) => {\n        if (typeof attendee === 'string') {\n          return { email: attendee };\n        }\n        return { email: attendee.email, displayName: attendee.name };\n      }) || [],\n      reminders: {\n        useDefault: false,\n        overrides: [\n          { method: 'email', minutes: 24 * 60 },\n          { method: 'popup', minutes: 10 },\n        ],\n      },\n    };\n\n    // Add Google Meet link if requested\n    if (createMeetLink) {\n      newEvent.conferenceData = {\n        createRequest: {\n          requestId: `meet-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          conferenceSolutionKey: {\n            type: 'hangoutsMeet'\n          }\n        }\n      };\n    }\n\n    const res = await calendar.events.insert({\n      calendarId: 'primary',\n      requestBody: newEvent,\n      // Required to create conference data (Google Meet links)\n      conferenceDataVersion: createMeetLink ? 1 : 0,\n      sendUpdates: 'all' // Send calendar invites to attendees\n    });\n\n    const createdEvent = res.data;\n    \n    // Return event data in our standardized format\n    return {\n      id: createdEvent.id,\n      googleEventId: createdEvent.id,\n      title: createdEvent.summary,\n      description: createdEvent.description,\n      startTime: createdEvent.start?.dateTime,\n      endTime: createdEvent.end?.dateTime,\n      meetingLink: createdEvent.hangoutLink || createdEvent.conferenceData?.entryPoints?.[0]?.uri,\n      attendees: createdEvent.attendees?.map(attendee => attendee.email) || [],\n      status: createdEvent.status,\n      htmlLink: createdEvent.htmlLink\n    };\n  } catch (error) {\n    console.error('Error creating calendar event:', error);\n    throw new Error('Failed to create calendar event');\n  }\n}\n\n/**\n * Delete an event from Google Calendar\n */\nexport async function deleteCalendarEvent(user: User, eventId: string) {\n  try {\n    if (!user.accessToken) {\n      throw new Error('User access token is missing');\n    }\n\n    const calendar = getCalendarClient(user.accessToken);\n    \n    await calendar.events.delete({\n      calendarId: 'primary',\n      eventId: eventId,\n    });\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error deleting calendar event:', error);\n    throw new Error('Failed to delete calendar event');\n  }\n}","size_bytes":4869},"server/mistral.ts":{"content":"import axios from 'axios';\nimport { MeetingExtraction, TitleSuggestion } from '../shared/schema.js';\n\nconst MISTRAL_API_URL = 'https://api.mistral.ai/v1/chat/completions';\nconst MISTRAL_API_KEY = process.env.MISTRAL_API_KEY || '';\n\nexport interface MistralMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n}\n\nconst SYSTEM_PROMPT = `You are an intelligent AI calendar assistant with advanced meeting creation capabilities. You help users manage their calendar, schedule meetings, create agendas, and organize tasks.\n\nWhen responding to meeting-related requests, you are capable of:\n1. Detecting when users want to create or schedule meetings\n2. Extracting meeting details from natural conversation\n3. Generating intelligent meeting titles based on context\n4. Providing helpful guidance through the meeting creation process\n\nAlways be conversational, helpful, and proactive in gathering the information needed to create successful meetings.`;\n\nexport async function getMistralResponse(messages: MistralMessage[]): Promise<string> {\n  try {\n    const response = await axios.post(\n      MISTRAL_API_URL,\n      {\n        model: 'mistral-tiny',\n        messages: [\n          {\n            role: 'system',\n            content: SYSTEM_PROMPT\n          },\n          ...messages\n        ],\n        temperature: 0.7,\n        max_tokens: 500\n      },\n      {\n        headers: {\n          'Authorization': `Bearer ${MISTRAL_API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n\n    return response.data.choices[0].message.content.trim();\n  } catch (error: any) {\n    console.error('Error calling Mistral API:', error.response?.data || error.message);\n    throw new Error('Failed to get response from AI assistant');\n  }\n}\n\nexport async function extractMeetingIntent(userMessage: string, conversationContext: string = ''): Promise<MeetingExtraction> {\n  const extractionPrompt = `Analyze the following user message and conversation context to determine if the user wants to create or schedule a meeting. Extract relevant meeting details and identify what information is missing.\n\nCurrent user message: \"${userMessage}\"\nConversation context: \"${conversationContext}\"\n\nYou MUST respond with ONLY a valid JSON object in this exact format:\n{\n  \"intent\": \"create_meeting\" | \"schedule_meeting\" | \"other\",\n  \"confidence\": number between 0 and 1,\n  \"fields\": {\n    \"startTime\": \"ISO 8601 string or null if not specified\",\n    \"endTime\": \"ISO 8601 string or null if not specified\", \n    \"duration\": number in minutes or null,\n    \"purpose\": \"meeting purpose/topic or null\",\n    \"participants\": [\"array\", \"of\", \"participant\", \"names/emails\"],\n    \"suggestedTitle\": \"AI-generated title based on context or null\"\n  },\n  \"missing\": [\"array of required fields that are missing: startTime, endTime, duration, participants\"]\n}\n\nExamples of meeting intent:\n- \"Let's schedule a meeting\" → create_meeting\n- \"Can we meet tomorrow at 2pm?\" → schedule_meeting  \n- \"Set up a call with John about the project\" → create_meeting\n- \"What's my calendar like?\" → other\n\nBe intelligent about extracting times, participants, and purpose from natural language.`;\n\n  try {\n    const response = await axios.post(\n      MISTRAL_API_URL,\n      {\n        model: 'mistral-tiny',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a precise meeting extraction specialist. Always respond with valid JSON only.'\n          },\n          {\n            role: 'user',\n            content: extractionPrompt\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 300\n      },\n      {\n        headers: {\n          'Authorization': `Bearer ${MISTRAL_API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n\n    const content = response.data.choices[0].message.content.trim();\n    \n    try {\n      return JSON.parse(content) as MeetingExtraction;\n    } catch (parseError) {\n      console.error('Failed to parse meeting extraction JSON:', content);\n      // Return default \"other\" intent if parsing fails\n      return {\n        intent: 'other',\n        confidence: 0,\n        fields: {\n          participants: []\n        },\n        missing: []\n      } as MeetingExtraction;\n    }\n  } catch (error: any) {\n    console.error('Error extracting meeting intent:', error.response?.data || error.message);\n    throw new Error('Failed to extract meeting intent');\n  }\n}\n\nexport async function generateMeetingTitles(purpose: string, participants: string[], context: string = ''): Promise<TitleSuggestion> {\n  const titlePrompt = `Generate 3 concise, professional meeting titles based on the following information:\n\nPurpose/Topic: \"${purpose}\"\nParticipants: ${participants.join(', ')}\nAdditional Context: \"${context}\"\n\nThe titles should be:\n- Professional and clear\n- 3-8 words long\n- Descriptive of the meeting purpose\n- Appropriate for calendar entries\n\nYou MUST respond with ONLY a valid JSON object in this exact format:\n{\n  \"suggestions\": [\"Title Option 1\", \"Title Option 2\", \"Title Option 3\"],\n  \"context\": \"brief explanation of the meeting context\"\n}\n\nExamples:\n- Purpose: \"project review\" → [\"Project Status Review\", \"Weekly Project Check-in\", \"Project Progress Discussion\"]\n- Purpose: \"budget planning\" → [\"Q4 Budget Planning\", \"Budget Review Meeting\", \"Financial Planning Session\"]`;\n\n  try {\n    const response = await axios.post(\n      MISTRAL_API_URL,\n      {\n        model: 'mistral-tiny',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a professional meeting title generator. Always respond with valid JSON only.'\n          },\n          {\n            role: 'user',\n            content: titlePrompt\n          }\n        ],\n        temperature: 0.5,\n        max_tokens: 200\n      },\n      {\n        headers: {\n          'Authorization': `Bearer ${MISTRAL_API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n\n    const content = response.data.choices[0].message.content.trim();\n    \n    try {\n      return JSON.parse(content) as TitleSuggestion;\n    } catch (parseError) {\n      console.error('Failed to parse title suggestions JSON:', content);\n      // Return default suggestions if parsing fails\n      return {\n        suggestions: [\"Team Meeting\", \"Discussion Session\", \"Project Sync\"],\n        context: \"General meeting\"\n      } as TitleSuggestion;\n    }\n  } catch (error: any) {\n    console.error('Error generating meeting titles:', error.response?.data || error.message);\n    throw new Error('Failed to generate meeting titles');\n  }\n}","size_bytes":6587},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  picture?: string;\n}\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  // Check if user is authenticated\n  const { data: user, isLoading: isChecking } = useQuery({\n    queryKey: ['auth', 'user'],\n    queryFn: async (): Promise<User | null> => {\n      try {\n        const response = await fetch('/api/auth/user', {\n          credentials: 'include'\n        });\n        if (response.ok) {\n          const data = await response.json();\n          return data.user;\n        }\n        return null;\n      } catch (error) {\n        return null;\n      }\n    },\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Logout failed');\n      }\n    },\n    onSuccess: () => {\n      queryClient.setQueryData(['auth', 'user'], null);\n      window.location.href = '/';\n    }\n  });\n\n  const signInWithGoogle = () => {\n    window.location.href = '/api/auth/google';\n  };\n\n  const logout = () => {\n    logoutMutation.mutate();\n  };\n\n  return {\n    user,\n    isAuthenticated: !!user,\n    isChecking,\n    signInWithGoogle,\n    logout,\n    isLoggingOut: logoutMutation.isPending\n  };\n}","size_bytes":1549},"client/src/components/MeetingUIBlocks.tsx":{"content":"import { useState } from \"react\";\nimport { Check, Plus, X, Calendar, Users, Video, Mail, CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { format, parseISO } from \"date-fns\";\nimport { Attendee, UIBlock } from \"../../../shared/schema\";\n\n// Email validation utility\nconst validateEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\nconst isVerifiedEmail = (email: string): boolean => {\n  // Consider Gmail emails as verified, but don't restrict to only Gmail\n  return email.toLowerCase().includes('@gmail.com') || email.toLowerCase().includes('@google.com');\n};\n\ninterface MeetingLinkChoiceProps {\n  data: UIBlock & { type: 'meeting_link_choice' };\n  onChoice: (includeLink: boolean, meetingId: string) => void;\n}\n\nexport function MeetingLinkChoice({ data, onChoice }: MeetingLinkChoiceProps) {\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-base flex items-center gap-2\">\n          <Video className=\"h-4 w-4\" />\n          Google Meet Link\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pb-3\">\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          {data.data.question}\n        </p>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"default\"\n            size=\"sm\"\n            onClick={() => onChoice(true, data.data.meetingId)}\n            className=\"flex-1\"\n            data-testid=\"button-add-meet-link\"\n          >\n            <Video className=\"h-3 w-3 mr-1\" />\n            Yes, add link\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onChoice(false, data.data.meetingId)}\n            className=\"flex-1\"\n            data-testid=\"button-skip-meet-link\"\n          >\n            Skip\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface AttendeeEditorProps {\n  data: UIBlock & { type: 'attendee_editor' };\n  onAttendeesUpdate: (attendees: Attendee[], meetingId: string) => void;\n}\n\nexport function AttendeeEditor({ data, onAttendeesUpdate }: AttendeeEditorProps) {\n  const [attendees, setAttendees] = useState<Attendee[]>(data.data.attendees);\n  const [newEmail, setNewEmail] = useState('');\n\n  const addAttendee = () => {\n    if (!newEmail.trim()) return;\n    \n    const isValid = validateEmail(newEmail);\n    if (!isValid) return; // Don't add invalid emails\n    \n    const newAttendee: Attendee = {\n      email: newEmail.trim().toLowerCase(),\n      verified: isVerifiedEmail(newEmail.trim().toLowerCase()),\n    };\n\n    const updatedAttendees = [...attendees, newAttendee];\n    setAttendees(updatedAttendees);\n    setNewEmail('');\n    onAttendeesUpdate(updatedAttendees, data.data.meetingId);\n  };\n\n  const removeAttendee = (index: number) => {\n    const updatedAttendees = attendees.filter((_, i) => i !== index);\n    setAttendees(updatedAttendees);\n    onAttendeesUpdate(updatedAttendees, data.data.meetingId);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      addAttendee();\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-lg\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-base flex items-center gap-2\">\n          <Users className=\"h-4 w-4\" />\n          Meeting Attendees\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"space-y-2\">\n          {attendees.map((attendee, index) => (\n            <div\n              key={index}\n              className=\"flex items-center gap-2 p-2 bg-muted rounded-md\"\n              data-testid={`attendee-${index}`}\n            >\n              <Mail className=\"h-3 w-3 text-muted-foreground\" />\n              <span className=\"text-sm flex-1\">{attendee.email}</span>\n              {attendee.verified && (\n                <CheckCircle className=\"h-4 w-4 text-green-600\" data-testid=\"verified-tick\" />\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => removeAttendee(index)}\n                className=\"h-6 w-6 p-0\"\n                data-testid={`button-remove-attendee-${index}`}\n              >\n                <X className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Input\n            value={newEmail}\n            onChange={(e) => setNewEmail(e.target.value)}\n            onKeyDown={handleKeyPress}\n            placeholder=\"Enter email address\"\n            className=\"flex-1\"\n            data-testid=\"input-attendee-email\"\n          />\n          <Button\n            onClick={addAttendee}\n            size=\"sm\"\n            variant=\"outline\"\n            disabled={!newEmail.trim()}\n            data-testid=\"button-add-attendee\"\n          >\n            <Plus className=\"h-3 w-3\" />\n          </Button>\n        </div>\n\n        {newEmail && !validateEmail(newEmail) && (\n          <p className=\"text-xs text-destructive\">\n            Please enter a valid email address\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface TitleSuggestionsProps {\n  data: UIBlock & { type: 'title_suggestions' };\n  onTitleSelect: (title: string, meetingId: string) => void;\n}\n\nexport function TitleSuggestions({ data, onTitleSelect }: TitleSuggestionsProps) {\n  const [customTitle, setCustomTitle] = useState(data.data.currentTitle || '');\n\n  const handleCustomTitle = () => {\n    if (customTitle.trim()) {\n      onTitleSelect(customTitle.trim(), data.data.meetingId);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleCustomTitle();\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-lg\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-base flex items-center gap-2\">\n          <Calendar className=\"h-4 w-4\" />\n          Meeting Title\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"space-y-2\">\n          <p className=\"text-xs text-muted-foreground\">AI Suggestions:</p>\n          <div className=\"space-y-1\">\n            {data.data.suggestions.map((suggestion, index) => (\n              <Button\n                key={index}\n                variant=\"ghost\"\n                className=\"w-full justify-start text-left h-auto py-2\"\n                onClick={() => onTitleSelect(suggestion, data.data.meetingId)}\n                data-testid={`button-title-suggestion-${index}`}\n              >\n                <span className=\"text-sm\">{suggestion}</span>\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        <Separator />\n\n        <div className=\"space-y-2\">\n          <p className=\"text-xs text-muted-foreground\">Or enter custom title:</p>\n          <div className=\"flex gap-2\">\n            <Input\n              value={customTitle}\n              onChange={(e) => setCustomTitle(e.target.value)}\n              onKeyDown={handleKeyPress}\n              placeholder=\"Enter meeting title\"\n              className=\"flex-1\"\n              data-testid=\"input-custom-title\"\n            />\n            <Button\n              onClick={handleCustomTitle}\n              size=\"sm\"\n              disabled={!customTitle.trim()}\n              data-testid=\"button-use-custom-title\"\n            >\n              <Check className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface EventReviewProps {\n  data: UIBlock & { type: 'event_review' };\n  onCreateEvent: (meetingId: string) => void;\n  onEdit: (field: string, meetingId: string) => void;\n}\n\nexport function EventReview({ data, onCreateEvent, onEdit }: EventReviewProps) {\n  const startTime = parseISO(data.data.startTime);\n  const endTime = parseISO(data.data.endTime);\n\n  return (\n    <Card className=\"w-full max-w-lg\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-base flex items-center gap-2\">\n          <Calendar className=\"h-4 w-4\" />\n          Review Meeting Details\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium text-sm\">{data.data.title}</p>\n              <p className=\"text-xs text-muted-foreground\">Meeting title</p>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onEdit('title', data.data.meetingId)}\n              data-testid=\"button-edit-title\"\n            >\n              Edit\n            </Button>\n          </div>\n\n          <Separator />\n\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium text-sm\">\n                {format(startTime, 'MMM d, yyyy')}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                {format(startTime, 'h:mm a')} - {format(endTime, 'h:mm a')}\n              </p>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onEdit('time', data.data.meetingId)}\n              data-testid=\"button-edit-time\"\n            >\n              Edit\n            </Button>\n          </div>\n\n          <Separator />\n\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"flex flex-wrap gap-1 mb-1\">\n                {data.data.attendees.map((attendee, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                    {attendee.email}\n                    {attendee.verified && (\n                      <CheckCircle className=\"h-3 w-3 ml-1 text-green-600\" />\n                    )}\n                  </Badge>\n                ))}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {data.data.attendees.length} attendee{data.data.attendees.length !== 1 ? 's' : ''}\n              </p>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onEdit('attendees', data.data.meetingId)}\n              data-testid=\"button-edit-attendees\"\n            >\n              Edit\n            </Button>\n          </div>\n\n          {data.data.includeMeetLink && (\n            <>\n              <Separator />\n              <div className=\"flex items-center gap-2\">\n                <Video className=\"h-4 w-4 text-blue-600\" />\n                <p className=\"text-sm text-muted-foreground\">\n                  Google Meet link will be included\n                </p>\n              </div>\n            </>\n          )}\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button\n          onClick={() => onCreateEvent(data.data.meetingId)}\n          className=\"w-full\"\n          data-testid=\"button-create-event\"\n        >\n          <Calendar className=\"h-4 w-4 mr-2\" />\n          Create Meeting\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n\n// Main component that renders the appropriate UI block\ninterface MeetingUIBlockProps {\n  uiBlock: UIBlock;\n  onMeetingLinkChoice?: (includeLink: boolean, meetingId: string) => void;\n  onAttendeesUpdate?: (attendees: Attendee[], meetingId: string) => void;\n  onTitleSelect?: (title: string, meetingId: string) => void;\n  onCreateEvent?: (meetingId: string) => void;\n  onEditField?: (field: string, meetingId: string) => void;\n}\n\nexport function MeetingUIBlock({\n  uiBlock,\n  onMeetingLinkChoice,\n  onAttendeesUpdate,\n  onTitleSelect,\n  onCreateEvent,\n  onEditField,\n}: MeetingUIBlockProps) {\n  switch (uiBlock.type) {\n    case 'meeting_link_choice':\n      return (\n        <MeetingLinkChoice\n          data={uiBlock}\n          onChoice={onMeetingLinkChoice || (() => {})}\n        />\n      );\n    case 'attendee_editor':\n      return (\n        <AttendeeEditor\n          data={uiBlock}\n          onAttendeesUpdate={onAttendeesUpdate || (() => {})}\n        />\n      );\n    case 'title_suggestions':\n      return (\n        <TitleSuggestions\n          data={uiBlock}\n          onTitleSelect={onTitleSelect || (() => {})}\n        />\n      );\n    case 'event_review':\n      return (\n        <EventReview\n          data={uiBlock}\n          onCreateEvent={onCreateEvent || (() => {})}\n          onEdit={onEditField || (() => {})}\n        />\n      );\n    default:\n      return null;\n  }\n}","size_bytes":12871}},"version":1}