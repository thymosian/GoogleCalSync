# Environment Configuration Template for Dual AI Services
# Copy this file to .env and fill in your actual values

# =============================================================================
# SESSION CONFIGURATION
# =============================================================================
# Secret key for session management (generate a secure random string)
SESSION_SECRET=your_secure_session_secret_here_at_least_32_characters_long

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL database connection URL (Railway format)
DATABASE_URL=postgresql://postgres:password@containers-us-west-xxx.railway.app:XXXX/railway

# =============================================================================
# GOOGLE OAUTH CONFIGURATION
# =============================================================================
# Google OAuth client credentials (from Google Cloud Console)
GOOGLE_CLIENT_ID=your_google_client_id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your_google_client_secret

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
# Port for the application server
PORT=5000

# =============================================================================
# GOOGLE GEMINI AI CONFIGURATION
# =============================================================================
# Gemini API key (from Google AI Studio)
GEMINI_API_KEY=your_gemini_api_key_here

# Gemini model to use (recommended: gemini-1.5-flash for stability)
GEMINI_MODEL=gemini-1.5-flash

# Gemini generation parameters
GEMINI_TEMPERATURE=0.3
GEMINI_MAX_OUTPUT_TOKENS=120
GEMINI_TOP_P=0.8
GEMINI_TOP_K=40

# =============================================================================
# MISTRAL AI CONFIGURATION
# =============================================================================
# Mistral API key (from Mistral AI platform)
MISTRAL_API_KEY=your_mistral_api_key_here

# Mistral model to use (recommended: mistral-medium-latest for better availability)
MISTRAL_MODEL=mistral-medium-latest

# Mistral generation parameters
MISTRAL_TEMPERATURE=0.3
MISTRAL_MAX_TOKENS=1000

# Mistral base URL (optional, leave empty for default)
MISTRAL_BASE_URL=

# =============================================================================
# AI ROUTER CONFIGURATION
# =============================================================================
# Enable detailed logging of routing decisions
AI_ROUTER_ENABLE_LOGGING=true

# Enable automatic fallback between AI services
AI_ROUTER_ENABLE_FALLBACK=true

# Default timeout for AI requests (milliseconds)
AI_ROUTER_DEFAULT_TIMEOUT=30000

# Maximum number of retry attempts
AI_ROUTER_MAX_RETRIES=2

# Delay between retry attempts (milliseconds)
AI_ROUTER_RETRY_DELAY=1000

# =============================================================================
# CONFIGURATION NOTES
# =============================================================================
# 
# Required Services:
# - At least one AI service (Gemini or Mistral) must be configured
# - Gemini is recommended for complex tasks (meeting intent, agenda generation)
# - Mistral is used for simple tasks and as fallback (chat responses, validation)
#
# Service Recommendations:
# - For production: Configure both Gemini and Mistral for optimal performance
# - For development: Gemini alone is sufficient, Mistral provides cost savings
# - For testing: Either service can be used independently
#
# Security Notes:
# - Keep API keys secure and never commit them to version control
# - Use environment-specific .env files for different deployments
# - Rotate API keys regularly for security
#
# Performance Notes:
# - Gemini: Higher quality but rate-limited and costs tokens
# - Mistral: Good quality, unlimited usage, free tier available
# - Router automatically optimizes usage based on task complexity